name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    services:
      # Add any service dependencies here if needed (Redis, PostgreSQL, etc.)
      
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./server
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Install Playwright browsers
      run: |
        pip install playwright
        playwright install chromium

    - name: Run backend linting
      working-directory: ./server
      run: |
        pip install flake8 black isort
        flake8 app tests --max-line-length=100 --ignore=E203,W503
        black --check app tests
        isort --check-only app tests

    - name: Run backend tests with coverage
      working-directory: ./server
      env:
        OPENAI_API_KEY: test-key-for-ci
        OPENAI_MODEL: gpt-4o
      run: |
        pytest tests/ \
          --cov=app \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          -v \
          --timeout=300

    - name: Upload backend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./server/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './client/package-lock.json'

    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci

    - name: Run frontend linting
      working-directory: ./client
      run: |
        npm run lint
        npm run lint:types  # If you have TypeScript checking

    - name: Run frontend tests with coverage
      working-directory: ./client
      run: |
        npm run test -- --coverage --watchAll=false --passWithNoTests

    - name: Build frontend
      working-directory: ./client
      run: npm run build

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./client/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        cache-dependency-path: './client/package-lock.json'

    - name: Install dependencies
      run: |
        # Backend dependencies
        cd server
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        playwright install chromium
        cd ..
        
        # Frontend dependencies
        cd client
        npm ci
        cd ..

    - name: Start backend server
      working-directory: ./server
      env:
        OPENAI_API_KEY: test-key-for-ci
        OPENAI_MODEL: gpt-4o
      run: |
        python -m app &
        sleep 10  # Wait for server to start
        curl -f http://localhost:8080/api/documents || exit 1

    - name: Build and serve frontend
      working-directory: ./client
      run: |
        npm run build
        npm install -g serve
        serve -s dist -l 3000 &
        sleep 5  # Wait for frontend to start
        curl -f http://localhost:3000 || exit 1

    - name: Run integration tests
      working-directory: ./server
      env:
        FRONTEND_URL: http://localhost:3000
        BACKEND_URL: http://localhost:8080
      run: |
        pytest tests/test_e2e.py -v --timeout=600

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Python quality tools
      run: |
        pip install bandit safety mypy
        pip install -r server/requirements.txt

    - name: Run security analysis with bandit
      working-directory: ./server
      run: |
        bandit -r app -f json -o bandit-report.json || true
        bandit -r app

    - name: Check for known security vulnerabilities
      working-directory: ./server
      run: |
        safety check -r requirements.txt

    - name: Run type checking with mypy
      working-directory: ./server
      run: |
        mypy app --ignore-missing-imports || true

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install frontend and audit
      working-directory: ./client
      run: |
        npm ci
        npm audit --audit-level=high

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add actual deployment steps here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add actual deployment steps here