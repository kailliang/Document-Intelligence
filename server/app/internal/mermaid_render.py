"""
MermaidÂõæË°®Ê∏≤ÊüìÂô®

Ë¥üË¥£Â∞ÜHTML‰∏≠ÁöÑMermaid‰ª£Á†ÅÂùóÊ∏≤Êüì‰∏∫È´òË¥®ÈáèÁöÑSVGÂõæÁâáÔºåÁî®‰∫éPDFÂØºÂá∫„ÄÇ
"""

import asyncio
import logging
import re
from typing import Dict, List, Tuple
from playwright.async_api import async_playwright
from bs4 import BeautifulSoup

logger = logging.getLogger(__name__)


class MermaidRenderer:
    """MermaidÂõæË°®Ê∏≤ÊüìÂô®Á±ª"""
    
    def __init__(self):
        self.mermaid_config = {
            'theme': 'default',
            'themeCSS': '.node rect { fill: #fff; stroke: #000; stroke-width: 1px; }',
            'flowchart': {'curve': 'basis'},
            'sequence': {'actorMargin': 50},
            'gantt': {'fontSize': 11},
        }
    
    async def process_html(self, html_content: str) -> str:
        """
        Â§ÑÁêÜHTMLÂÜÖÂÆπÔºåÂ∞ÜÂÖ∂‰∏≠ÁöÑMermaidËäÇÁÇπÊ∏≤Êüì‰∏∫SVG
        
        Args:
            html_content: ÂåÖÂê´MermaidËäÇÁÇπÁöÑHTMLÂÜÖÂÆπ
            
        Returns:
            Â§ÑÁêÜÂêéÁöÑHTMLÂÜÖÂÆπÔºåMermaid‰ª£Á†ÅÂ∑≤ÊõøÊç¢‰∏∫SVG
        """
        try:
            logger.info("ÂºÄÂßãÂ§ÑÁêÜMermaidÂõæË°®...")
            
            # Ëß£ÊûêHTML
            soup = BeautifulSoup(html_content, 'html.parser')
            
            # Êü•ÊâæÊâÄÊúâÁöÑmermaid-nodeÂÖÉÁ¥†
            mermaid_nodes = soup.find_all(['mermaid-node', 'div'], class_='mermaid-node')
            
            # È¢ùÂ§ñË∞ÉËØïÔºöÊü•ÊâæÊâÄÊúâÂåÖÂê´data-type="mermaid-diagram"ÁöÑÂÖÉÁ¥†
            mermaid_diagrams = soup.find_all(['div'], attrs={'data-type': 'mermaid-diagram'})
            logger.info(f"üîç Found {len(mermaid_diagrams)} elements with data-type='mermaid-diagram'")
            
            # ÂêàÂπ∂‰∏§ÁßçÊü•ÊâæÊñπÂºèÁöÑÁªìÊûú
            all_mermaid_elements = list(set(mermaid_nodes + mermaid_diagrams))
            
            if not all_mermaid_elements:
                logger.info("‚ùå Êú™ÊâæÂà∞MermaidËäÇÁÇπÔºåÁõ¥Êé•ËøîÂõûÂéüÂßãHTML")
                logger.info(f"üîç HTML preview: {html_content[:500]}...")
                logger.info(f"üîç Searching for mermaid-node class: {html_content.count('mermaid-node')}")
                search_term = 'data-type="mermaid-diagram"'
                logger.info(f"üîç Searching for data-type=mermaid-diagram: {html_content.count(search_term)}")
                return html_content
            
            logger.info(f"‚úÖ ÊâæÂà∞ {len(all_mermaid_elements)} ‰∏™MermaidËäÇÁÇπ")
            
            # Ê∏≤ÊüìÊØè‰∏™MermaidËäÇÁÇπ
            for i, node in enumerate(all_mermaid_elements):
                try:
                    # ÊèêÂèñMermaidËØ≠Ê≥ïÂíåÊ†áÈ¢ò
                    syntax = self._extract_mermaid_syntax(node)
                    title = self._extract_mermaid_title(node)
                    
                    if syntax:
                        logger.info(f"Ê∏≤ÊüìÁ¨¨ {i+1} ‰∏™MermaidÂõæË°®...")
                        logger.info(f"üìä Using syntax: {syntax[:100]}...")
                        svg_content = await self._render_mermaid_to_svg(syntax)
                        
                        if svg_content:
                            # ÂàõÂª∫Êñ∞ÁöÑSVGÂÆπÂô®
                            svg_container = self._create_svg_container(svg_content, title)
                            node.replace_with(BeautifulSoup(svg_container, 'html.parser'))
                            logger.info(f"Á¨¨ {i+1} ‰∏™MermaidÂõæË°®Ê∏≤ÊüìÊàêÂäü - SVG length: {len(svg_content)}")
                        else:
                            logger.warning(f"Á¨¨ {i+1} ‰∏™MermaidÂõæË°®Ê∏≤ÊüìÂ§±Ë¥•Ôºå‰øùÁïôÂéüÂßãÂÜÖÂÆπ")
                    else:
                        logger.warning(f"Á¨¨ {i+1} ‰∏™MermaidËäÇÁÇπÊú™ÊâæÂà∞ËØ≠Ê≥ïÂÜÖÂÆπ")
                        logger.warning(f"üìã Node details: tag={node.name}, attrs={node.attrs}")
                        
                except Exception as e:
                    logger.error(f"Â§ÑÁêÜÁ¨¨ {i+1} ‰∏™MermaidËäÇÁÇπÊó∂Âá∫Èîô: {str(e)}")
                    continue
            
            result_html = str(soup)
            logger.info("MermaidÂõæË°®Â§ÑÁêÜÂÆåÊàê")
            return result_html
            
        except Exception as e:
            logger.error(f"Â§ÑÁêÜMermaidÂõæË°®Êó∂Âá∫Èîô: {str(e)}")
            return html_content  # Âá∫ÈîôÊó∂ËøîÂõûÂéüÂßãÂÜÖÂÆπ
    
    def _extract_mermaid_syntax(self, node) -> str:
        """‰ªéËäÇÁÇπ‰∏≠ÊèêÂèñMermaidËØ≠Ê≥ï"""
        logger.info(f"üîç Extracting mermaid syntax from node: {node.name if hasattr(node, 'name') else 'unknown'}")
        logger.info(f"üîç Node attributes: {node.attrs if hasattr(node, 'attrs') else 'none'}")
        
        # Â∞ùËØï‰ªéÂ±ûÊÄß‰∏≠Ëé∑Âèñ
        syntax = node.get('syntax') or node.get('data-syntax')
        
        if syntax:
            logger.info(f"‚úÖ Found syntax in attributes: {syntax[:50]}...")
            return syntax
        
        # Â∞ùËØï‰ªéÂ≠êÂÖÉÁ¥†‰∏≠Êü•Êâæ
        syntax_elem = node.find(['pre', 'code'], class_='mermaid-syntax')
        if syntax_elem:
            logger.info(f"‚úÖ Found syntax in child element: {syntax_elem.get_text()[:50]}...")
            return syntax_elem.get_text().strip()
        
        # Â∞ùËØï‰ªéÊñáÊú¨ÂÜÖÂÆπ‰∏≠ÊèêÂèñ
        text_content = node.get_text().strip()
        logger.info(f"üîç Node text content: {text_content[:100]}...")
        
        if text_content and ('graph' in text_content or 'flowchart' in text_content or 'sequenceDiagram' in text_content):
            return text_content
        
        return ""
    
    def _extract_mermaid_title(self, node) -> str:
        """‰ªéËäÇÁÇπ‰∏≠ÊèêÂèñMermaidÊ†áÈ¢ò"""
        # Â∞ùËØï‰ªéÂ±ûÊÄß‰∏≠Ëé∑Âèñ
        title = node.get('title') or node.get('data-title')
        
        if title:
            return title
        
        # Â∞ùËØï‰ªéÂ≠êÂÖÉÁ¥†‰∏≠Êü•Êâæ
        title_elem = node.find(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'div'], class_='mermaid-title')
        if title_elem:
            return title_elem.get_text().strip()
        
        return ""
    
    async def _render_mermaid_to_svg(self, mermaid_syntax: str) -> str:
        """
        ‰ΩøÁî®PlaywrightÊ∏≤ÊüìMermaidËØ≠Ê≥ï‰∏∫SVG
        
        Args:
            mermaid_syntax: MermaidËØ≠Ê≥ïÂ≠óÁ¨¶‰∏≤
            
        Returns:
            Ê∏≤ÊüìÂêéÁöÑSVGÂ≠óÁ¨¶‰∏≤
        """
        try:
            async with async_playwright() as p:
                browser = await p.chromium.launch(headless=True)
                page = await browser.new_page()
                
                # ÂàõÂª∫ÂåÖÂê´MermaidÁöÑHTMLÈ°µÈù¢
                html_template = f"""
                <!DOCTYPE html>
                <html>
                <head>
                    <script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
                    <style>
                        body {{ 
                            margin: 20px; 
                            font-family: 'Arial', sans-serif;
                            background: white;
                        }}
                        .mermaid {{ 
                            text-align: center;
                            background: white;
                            max-width: 100%;
                        }}
                        svg {{
                            max-width: 100% !important;
                            width: 100% !important;
                            height: auto !important;
                            min-width: 400px !important;
                        }}
                    </style>
                </head>
                <body>
                    <div class="mermaid" id="mermaid-diagram">
                        {mermaid_syntax}
                    </div>
                    <script>
                        mermaid.initialize({{
                            startOnLoad: true,
                            theme: 'default',
                            securityLevel: 'loose',
                            fontFamily: 'Arial, sans-serif',
                            flowchart: {{
                                htmlLabels: false,
                                curve: 'basis',
                                useMaxWidth: true,
                                nodeSpacing: 50,
                                rankSpacing: 50
                            }},
                            themeVariables: {{
                                fontSize: '14px',
                                fontSizeNode: '12px',
                                primaryColor: '#ffffff',
                                primaryTextColor: '#000000',
                                primaryBorderColor: '#000000',
                                lineColor: '#000000'
                            }}
                        }});
                    </script>
                </body>
                </html>
                """
                
                await page.set_content(html_template)
                
                # Á≠âÂæÖMermaidÊ∏≤ÊüìÂÆåÊàê
                await page.wait_for_timeout(2000)
                
                # Ëé∑ÂèñÊ∏≤ÊüìÂêéÁöÑSVG
                svg_element = await page.query_selector('svg')
                if svg_element:
                    # Get the complete SVG element including opening/closing tags
                    svg_outer = await svg_element.evaluate('el => el.outerHTML')
                    
                    if svg_outer:
                        # Remove CSS animations that break PDF rendering
                        clean_svg = self._remove_css_animations(svg_outer)
                        await browser.close()
                        return clean_svg
                    else:
                        # Fallback: construct SVG from innerHTML and attributes
                        svg_content = await svg_element.inner_html()
                        svg_attrs = await svg_element.evaluate('el => el.getAttributeNames().map(name => `${name}="${el.getAttribute(name)}"`).join(" ")')
                        
                        complete_svg = f'<svg {svg_attrs}>{svg_content}</svg>'
                        clean_svg = self._remove_css_animations(complete_svg)
                        await browser.close()
                        return clean_svg
                else:
                    logger.error("Êú™ÊâæÂà∞Ê∏≤ÊüìÂêéÁöÑSVGÂÖÉÁ¥†")
                    await browser.close()
                    return ""
                    
        except Exception as e:
            logger.error(f"MermaidÊ∏≤ÊüìÂ§±Ë¥•: {str(e)}")
            return ""
    
    def _create_svg_container(self, svg_content: str, title: str = "") -> str:
        """
        ÂàõÂª∫SVGÂÆπÂô®HTML
        
        Args:
            svg_content: SVGÂÜÖÂÆπ
            title: ÂõæË°®Ê†áÈ¢ò
            
        Returns:
            ÂåÖË£ÖÂêéÁöÑHTMLÂÆπÂô®
        """
        title_html = ""
        if title:
            title_html = f'<div class="mermaid-title" style="text-align: center; font-weight: bold; margin-bottom: 10px; font-size: 14px;">{title}</div>'
        
        return f'''
        <div class="mermaid-container" style="text-align: center; margin: 20px 0; page-break-inside: avoid;">
            {title_html}
            <div class="mermaid-diagram" style="display: inline-block;">
                {svg_content}
            </div>
        </div>
        '''
    
    def _remove_css_animations(self, svg_content: str) -> str:
        """
        ÁßªÈô§SVG‰∏≠ÁöÑCSSÂä®ÁîªÔºåËß£ÂÜ≥PDFÊ∏≤ÊüìÈóÆÈ¢ò
        
        Args:
            svg_content: ÂåÖÂê´Âä®ÁîªÁöÑSVGÂÜÖÂÆπ
            
        Returns:
            ÁßªÈô§Âä®ÁîªÂêéÁöÑSVGÂÜÖÂÆπ
        """
        import re
        
        # ÁßªÈô§ @keyframes Âä®ÁîªÂÆö‰πâ (Êõ¥ÂÖ®Èù¢ÁöÑÊ®°Âºè)
        svg_content = re.sub(r'@keyframes[^}]*\{[^}]*\}', '', svg_content, flags=re.DOTALL)
        svg_content = re.sub(r'@-webkit-keyframes[^}]*\{[^}]*\}', '', svg_content, flags=re.DOTALL)
        
        # ÁßªÈô§ÊâÄÊúâanimationÁõ∏ÂÖ≥ÁöÑCSSÂ±ûÊÄß
        svg_content = re.sub(r'animation[^;:]*:[^;]*;', '', svg_content)
        svg_content = re.sub(r'animation[^;:]*\s*:[^;]*;', '', svg_content)
        svg_content = re.sub(r'-webkit-animation[^;:]*:[^;]*;', '', svg_content)
        
        # ÁßªÈô§ transition Â±ûÊÄß
        svg_content = re.sub(r'transition[^;:]*:[^;]*;', '', svg_content)
        svg_content = re.sub(r'-webkit-transition[^;:]*:[^;]*;', '', svg_content)
        
        # ÁßªÈô§stroke-dasharrayÂíåstroke-dashoffsetÁõ∏ÂÖ≥ÁöÑÂä®ÁîªÂ±ûÊÄß
        svg_content = re.sub(r'stroke-dasharray[^;:]*:[^;]*;', '', svg_content)
        svg_content = re.sub(r'stroke-dashoffset[^;:]*:[^;]*;', '', svg_content)
        
        # Ê∏ÖÁêÜÂ§ö‰ΩôÁöÑÁ©∫ÁôΩÂíåÂàÜÂè∑
        svg_content = re.sub(r'\s+', ' ', svg_content)
        svg_content = re.sub(r';\s*;', ';', svg_content)
        svg_content = re.sub(r'style\s*=\s*"[^"]*;"', lambda m: m.group(0).replace(';;', ';'), svg_content)
        
        logger.info("‚úÖ Â∑≤ÁßªÈô§SVG‰∏≠ÁöÑCSSÂä®ÁîªÂíåÁõ∏ÂÖ≥Â±ûÊÄß")
        return svg_content