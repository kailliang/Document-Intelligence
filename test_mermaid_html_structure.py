#!/usr/bin/env python3
"""
Test script to verify Mermaid HTML structure and SVG processing
"""

import asyncio
import sys
import os
from pathlib import Path

# Add server directory to path
sys.path.append(str(Path(__file__).parent / 'server'))

from bs4 import BeautifulSoup
from server.app.internal.mermaid_render import MermaidRenderer

async def test_mermaid_html_processing():
    """Test the complete Mermaid HTML processing pipeline"""
    
    print("🧪 Starting Mermaid HTML Structure Test")
    print("=" * 50)
    
    # Test HTML structure that should be generated by frontend
    test_html_structures = [
        # Test 1: Basic mermaid diagram with data attributes
        '''<div data-type="mermaid-diagram" class="mermaid-node" data-syntax="graph TD; A[Start] --> B[End]" data-title="Test Flow">
            <div class="mermaid-title">Test Flow</div>
            <div class="mermaid-diagram"><!-- rendered content --></div>
        </div>''',
        
        # Test 2: Mermaid diagram without title
        '''<div data-type="mermaid-diagram" class="mermaid-node" data-syntax="sequenceDiagram; Alice->>Bob: Hello">
            <div class="mermaid-diagram"><!-- rendered content --></div>
        </div>''',
        
        # Test 3: Complex diagram syntax
        '''<div data-type="mermaid-diagram" class="mermaid-node" data-syntax="flowchart LR; A[Start] --> B{Decision}; B -->|Yes| C[Success]; B -->|No| D[Retry]" data-title="Decision Flow">
            <div class="mermaid-title">Decision Flow</div>
            <div class="mermaid-diagram"><!-- rendered content --></div>
        </div>'''
    ]
    
    renderer = MermaidRenderer()
    
    for i, test_html in enumerate(test_html_structures, 1):
        print(f"\n📋 Test {i}: Processing HTML structure")
        print("-" * 30)
        
        # Parse with BeautifulSoup to see what backend will find
        soup = BeautifulSoup(test_html, 'html.parser')
        
        # Check detection by class
        mermaid_nodes = soup.find_all(['mermaid-node', 'div'], class_='mermaid-node')
        print(f"🔍 Found {len(mermaid_nodes)} nodes with class='mermaid-node'")
        
        # Check detection by data-type
        mermaid_diagrams = soup.find_all(['div'], attrs={'data-type': 'mermaid-diagram'})
        print(f"🔍 Found {len(mermaid_diagrams)} nodes with data-type='mermaid-diagram'")
        
        # Test syntax extraction
        if mermaid_diagrams:
            node = mermaid_diagrams[0]
            syntax = node.get('data-syntax')
            title = node.get('data-title', '')
            print(f"📊 Extracted syntax: {syntax[:50]}...")
            print(f"📝 Extracted title: {title}")
            
            if syntax:
                print("✅ Syntax extraction successful")
                
                # Test actual SVG rendering
                try:
                    print("🎨 Testing SVG rendering...")
                    svg_result = await renderer._render_mermaid_to_svg(syntax)
                    
                    if svg_result:
                        print(f"✅ SVG rendering successful (length: {len(svg_result)})")
                        
                        # Check if CSS animations are removed
                        if '@keyframes' in svg_result or 'animation:' in svg_result:
                            print("⚠️  CSS animations still present - will be cleaned")
                        else:
                            print("✅ No CSS animations detected")
                            
                        # Test complete processing
                        print("🔄 Testing complete HTML processing...")
                        processed_html = await renderer.process_html(test_html)
                        
                        if '<svg' in processed_html:
                            print("✅ Complete processing successful - SVG found in output")
                        else:
                            print("❌ Complete processing failed - no SVG in output")
                            print(f"Output preview: {processed_html[:200]}...")
                    else:
                        print("❌ SVG rendering failed")
                        
                except Exception as e:
                    print(f"❌ SVG rendering error: {e}")
            else:
                print("❌ No syntax found in data-syntax attribute")
        else:
            print("❌ No mermaid diagrams detected")
    
    print(f"\n🏁 Test completed")
    print("=" * 50)

async def test_pdf_export_html_cleaning():
    """Test the HTML cleaning process for PDF export"""
    
    print("\n🧹 Testing PDF Export HTML Cleaning")
    print("=" * 40)
    
    # Import PDF exporter
    from server.app.internal.pdf_export import PDFExporter
    
    # Test HTML with TipTap attributes that should be cleaned but preserve Mermaid data
    test_html = '''
    <div data-type="mermaid-diagram" class="mermaid-node" data-syntax="graph TD; A-->B" data-title="Test" contenteditable="false" spellcheck="false" data-tiptap-node="true">
        <div class="mermaid-title">Test Diagram</div>
        <div class="mermaid-diagram">
            <svg><!-- SVG content --></svg>
        </div>
    </div>
    '''
    
    exporter = PDFExporter()
    cleaned_html = exporter._clean_html_content(test_html)
    
    print("🔍 Checking cleaned HTML:")
    
    # Parse cleaned HTML
    soup = BeautifulSoup(cleaned_html, 'html.parser')
    mermaid_div = soup.find('div', {'data-type': 'mermaid-diagram'})
    
    if mermaid_div:
        print("✅ Mermaid div preserved")
        
        # Check preserved attributes
        if mermaid_div.get('data-syntax'):
            print("✅ data-syntax preserved")
        else:
            print("❌ data-syntax lost")
            
        if mermaid_div.get('data-title'):
            print("✅ data-title preserved")
        else:
            print("❌ data-title lost")
            
        # Check removed attributes
        if mermaid_div.get('contenteditable'):
            print("❌ contenteditable not removed")
        else:
            print("✅ contenteditable removed")
            
        if mermaid_div.get('data-tiptap-node'):
            print("❌ data-tiptap-node not removed")
        else:
            print("✅ data-tiptap-node removed")
    else:
        print("❌ Mermaid div not found after cleaning")
    
    print(f"Cleaned HTML: {cleaned_html}")

if __name__ == "__main__":
    asyncio.run(test_mermaid_html_processing())
    asyncio.run(test_pdf_export_html_cleaning())